{
  "title": "Custom Rewrite Rules Per Post",
  "subtitle": "",
  "slug": "custom-rewrite-rules-per-post",
  "section": "",
  "url": "/custom-rewrite-rules-per-post/",
  "body": "I often feel like I’m coercing WordPress into doing my bidding. It makes me feel dirty. Never more has this been the case than when I was asked to find a way to allow post authors to customise the rewrite base for a custom post type (CPT). What does that mean exactly? It means that if a CPT was registered with:\r\n\r\n```\r\nregister_post_type('my-special-post-type', array(\r\n    // ...params...\r\n    'rewrite' => array(\r\n        'slug' => 'horses',\r\n        'with_front' => false\r\n     ),\r\n    // ...more params...\r\n));\r\n```\r\n\r\n…instead of the *my_special_post_type* post having a permalink of `http://www.mysite.com/horses/%postname%/`, the user could override the default CPT base slug of `/horses/` and force the post to use `http://www.mysite.com/unicorns/%postname%/` instead.\r\n\r\n### Hooks & Hacks\r\n\r\nIf you don’t understand [custom post types](https://codex.wordpress.org/Function_Reference/register_post_type), you have no business attempting what follows. This isn’t <del>going</del> meant to be an in-depth, step-by-step walk through. I’m mainly writing this as a means to purge the experience from my system. Honestly, it feels very hacky, which shouldn’t really be the case, considering I’m doing it all “the WordPress way”. Everything was implemented using hooks and filters. Does that mean the WordPress way is hacky? Or am I just doing it wrong? You be the judge. Right now, I don’t give a shit. It works. Flawlessly. So far…\r\n\r\n### The Process\r\n\r\nAs usual, I googled around a fair bit to see if there were any publicly demonstrated implementations I could borrow. Why reinvent the wheel, right? Unfortunately, I didn’t find any. Plan B? Work out the steps I think will be required to make it happen, then do it. The basic steps I came up with were as follows:\r\n\r\n- Add/save a field on the edit page that allows specification of the new slug.\r\n- Add rewrite rules based on this above custom slug.\r\n- With rewrite rule active, prevent access to the post via post type’s *actual* base slug.\r\n- Generate permalinks based on the custom slug, not the post type’s *actual* base slug.\r\n\r\nI could have started with adding the field and saving the value, but I figured that part would be easy. Instead, I started with what I thought would be the most difficult part: setting up the rewrite rules.\r\n\r\n### Dynamic Rewrite Rules\r\n\r\nSince I wouldn’t know before hand what rules would be required, I needed to work that out on the fly and add them, before WP started processing the stored rules. I hooked into `init` and created a function that retrieves posts of type `my_special_post_type` that have been assigned a custom base slug. Then I iterated through each of the found posts and added a rewrite rule for each.\r\n\r\n```\r\nadd_action('init', 'my_init_function');\r\n\r\nfunction my_init_function() {\r\n\r\n    add_my_special_rules();\r\n\r\n    add_filter('post_type_link', 'my_special_filter_permalink'), 10, 3);\r\n    add_action('template_redirect', 'my_special_override'), 1);\r\n}\r\n\r\nfunction add_my_special_rules() {\r\n    global $wpdb;\r\n\r\n    $sql = \"SELECT *\r\n            FROM `wp_posts`\r\n            JOIN `wp_postmeta` ON `post_id` = `ID`\r\n            WHERE `post_type` = 'my_special_post_type'\r\n            AND `post_status` = 'publish'\r\n            AND `meta_key` = 'my_special_post_options'\r\n            AND `meta_value` LIKE '%my_slug_override%'\";\r\n\r\n    $results = $wpdb->get_results($sql);\r\n\r\n    if ($results) {\r\n\r\n        foreach ($results as $post) {\r\n            $options = unserialize($post->meta_value);\r\n\r\n            if (array_key_exists('my_slug_override', $options) && empty($options['my_slug_override'])) continue;\r\n\r\n            add_rewrite_rule(\"^{$options['my_slug_override']}/({$post->post_name})/?$\", \"index.php?my_special_post_type=\\$matches[1]&post_type=my_special_post_type=\\$matches[1]\", 'top');\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis isn’t the precise code I used, so don’t just lift it and expect it to work. My actual implementation was part of a class in a plugin, where as the above could be in the functions.php. It’s essentially the same, though. Also, it was for a hierarchical CPT, but the above is for a non-hierarchical CPT for the sake of simplicity.\r\n\r\nFor a hierarchical CPT, you might only want the override option on the top level post, and have all child pages’s slugs derived from that. You may also want to match on anything *starting with* the post name (e.g. `\"^{$options['my_slug_override']}/({$post->post_name}.*)/?$\"`, which is what’s in my original implementation) rather than what is above. It depends on the nature of the post type, I guess.\r\n\r\nAnd if you’re wondering why I added a rewrite rule for each post, rather than one for each distinct base, it’s so that posts that weren’t meant to be found via that base, aren’t. This way, a page that’s only meant to be found via `/horses/mister-ed/` won’t also be found via `/unicorns/mister-ed/`.\r\n\r\n### Override Permalinks\r\n\r\nLike a good little WP soldier, I use `get_permalink()` and `the_permalink()` (but not repeatedly within the same template!) to construct URLs whenever I can. The problem with these functions is that they determine part of the permalink structure from the `rewrite` params supplied when the post type was registered. Shit.\r\n\r\nTo get around this was fairly trivial, though. I used the `post_type_link` filter hook, added as a filter in the `init` function above. This is *not* to be confused with the `post_link` filter hook which *only* applies to posts of type `post`. It took me a few minutes of checking and double checking before I realised what was wrong.\r\n\r\n```\r\nfunction my_special_filter_permalink($url, $post, $leavename) {\r\n\r\n    // Only apply this filter to special features.\r\n    if ($post->post_type != 'my_special_post_type') return $url;\r\n\r\n    $options = get_post_meta($post->ID, 'my_special_post_options', true);\r\n\r\n    if (array_key_exists('my_slug_override', $options) && !empty($options['my_slug_override'])) {\r\n        $url = str_replace('/horses/', \"/{$options['my_slug_override']}/\", $url);\r\n    }\r\n\r\n    return $url;\r\n}\r\n```\r\n\r\n### Redirect The “Real” Permalink\r\n\r\nThe rewrite rules added dynamically via the `init` action hook make the posts with a custom base accessible (i.e. you don’t get a 404), but they’re still accessible through their “real” URL too. For example, `http://www.mysite.com/unicorns/better-than-horses/` is still accessible via `http://www.mysite.com/horses/better-than-horses/` at this point. Definitely don’t want that. For this, I hooked into the `template_redirect` action hook.\r\n\r\n```\r\nfunction my_special_override() {\r\n    global $post;\r\n\r\n    // Skip anything that's not my special post type...\r\n    if ($post->post_type != 'my_special_post_type') return;\r\n\r\n    // See if this thing has an override...\r\n    $options = get_post_meta($post->ID, 'my_special_post_options', true);\r\n\r\n    if (!array_key_exists('my_slug_override', $feature_options) || empty($feature_options['my_slug_override'])) return;\r\n\r\n    // It has an override, so should it be accessed via the current URL?\r\n    $current_path = $_SERVER['REQUEST_URI'];\r\n\r\n    if (strpos($current_path, \"/{$feature_options['my_slug_override']}\") !== false) return;\r\n\r\n    // It's using the wrong path, let's redirect to the right one.\r\n    $the_right_one = str_replace('/horses/', \"/{$feature_options['my_slug_override']}/\", $current_path);\r\n\r\n    // Fuck yea.\r\n    wp_redirect(home_url($the_right_one), 301);\r\n    exit();\r\n}\r\n```\r\n\r\nI originally tried to add a rewrite rule using the earlier method that would redirect requests for the “real” URL to the custom one. It didn’t work out. I think it was for the best.\r\n\r\n### Save The Slug\r\n\r\nI won’t bother showing the code for adding an input field or metabox to WP’s edit post page, that’s a waste of keystrokes. Nor will I bother with the whole `save_posts` action hook — it’s what I used, naturally (it’s the WordPress way, after all), but it’s not interesting.\r\n\r\nWhat’s more interesting is that `flush_rewrite_rules()`— which needs to be called once the slug override option has been saved (in my case, I saved it as post meta) — exhibited unexpected behaviour. After the post was saved, the path to the new slug didn’t work, even though the post meta was saved and `flush_rewrite_rules()` was called during the save process. However, if I then saved a new value for the slug, the URL containing the *last* slug would start working, but the latest one would not.\r\n\r\nI dug into `/wp-includes/rewrite.php` which eventually led me to this block, around line 2043:\r\n\r\n```\r\npublic function flush_rules($hard = true) {\r\n    delete_option('rewrite_rules');\r\n    $this->wp_rewrite_rules();\r\n    /**\r\n     * Filter whether a \"hard\" rewrite rule flush should be performed when requested.\r\n     *\r\n     * A \"hard\" flush updates .htaccess (Apache) or web.config (IIS).\r\n     *\r\n     * @since 3.7.0\r\n     *\r\n     * @param bool $hard Whether to flush rewrite rules \"hard\". Default true.\r\n     */\r\n    if ( ! $hard || ! apply_filters( 'flush_rewrite_rules_hard', true ) ) {\r\n        return;\r\n    }\r\n    if ( function_exists( 'save_mod_rewrite_rules' ) )\r\n        save_mod_rewrite_rules();\r\n    if ( function_exists( 'iis7_save_url_rewrite_rules' ) )\r\n        iis7_save_url_rewrite_rules();\r\n}\r\n```\r\n\r\nSo, I replaced `flush_rewrite_rules()` with `delete_option('rewrite_rules')` and it suddenly started working as expected. *Hallelujah*. The custom URL base was immediately functional for the post on which it had been set, and for no others (as it should be). I went even deeper and settled on the more explicit:\r\n\r\n```\r\n$wpdb->delete($wpdb->options, array('option_name' => 'rewrite_rules'));\r\n```\r\n\r\n### In closing…\r\n\r\nDespite the fact that it works, I don’t recommend implementing something like this. If a post is meant to be under a different section, then it should have the appropriate category, tag or post type. This isn’t always possible though. In my case, I had no choice, for reasons I won’t go into. Suffice it to say that simply creating special categories or tags, or a new post type, just wasn’t feasible given our setup, which is incredibly bespoke.\r\n\r\nAnd this is my typical experience of WordPress. I think it allows you to do *too much*. In trying to be everything to everyone it has become as much a whore as the language it’s written in (looking at you, *PHP*). It’s up to developers to use it sensibly. This isn’t a massive problem for small sites. But when you’ve got thousands upon thousands of posts (across many post types) and millions of visitors, those “clever” workarounds, inefficient but functional solutions, and hacky fixes end up boxing you in, inevitably forcing you to refactor, rewrite, or create even more “clever” workarounds and hacks further down the line. I suspect I’ll also end up paying for this piece of work eventually.\r\n\r\nTechnical debt is a bitch. And so is WordPress.\r\n\r\n\r\n",
  "summary": "",
  "blog": "1",
  "created": "2015-11-11T19:08:28.000Z",
  "updated": "2017-04-22T17:16:01.087Z",
  "published": "2015-11-11T19:08:28.000Z",
  "contentType": "page",
  "id": "BkHvaPJN0g"
}