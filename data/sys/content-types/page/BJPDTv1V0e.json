{
  "title": "Wordpress Cron Job Log (The Cronundrum)",
  "subtitle": "",
  "slug": "wordpress-cron-job-log-the-cronundrum",
  "section": "",
  "url": "/wordpress-cron-job-log-the-cronundrum/",
  "body": "Like most people, I don’t like it when my basic needs aren’t met. Recently, I had the basic need to know when a WordPress [[pseudo](https://www.lucasrolff.com/wordpress/why-wp-cron-sucks/)-]cron job had last run. It turns out, WordPress doesn’t provide a straightforward way of showing this information. In fact, it doesn’t even provide an in-built way to *log* this information. *WTF?*\r\n\r\n### And so it begins…\r\n\r\nFirst, to explain the *why*. We noticed our website was running into issues around the same time, on the same day of the week, on several occasions. It wasn’t happening weekly, but the recurring day and time of day was too frequent to be a coincidence. Naturally, my attention turned towards WP Cron.\r\n\r\nThere’s a link above that explains some of the reasons WP Cron sucks, but one of the biggest reasons is that *it runs on **every** request*. Ugh. I understand the fundamental reason: *the real cron* is configured on the server, and given the multitude of environments in which WordPress might run, it can never be assumed that *the real cron* will be accessible and configurable by it.\r\n\r\nChecking for overdue cron tasks on every request is an ugly solution, but at least it kicks off cron jobs in a new process, I guess…\r\n\r\n### Logging the unloggable (not a word)\r\n\r\nAfter spending some quality time with `/wp-includes/cron.php` and `/wp-cron.php`, I had a few ideas about how I might be able to create a makeshift cron job logger:\r\n\r\n- filter `cron_request`\r\n- filter `unschedule_event`\r\n- filter `schedule_event`\r\n\r\n#### Filtering cron_request\r\n\r\nThe first option seemed like a no-brainer. The cron is (programmatically) started by a direct call to `spawn_cron`, or an indirect call to `wp_cron`. Within `spawn_cron`, the `cron_request` filters are applied. This looks like the right filter to use.\r\n\r\n*No dice*. Filtering `cron_request`, was a bust. All that gets passed to the callback is the URL that was requested (i.e. the path to `wp-cron.php`), the current date/time (passed as `key` with the value of `$doing_wp_cron`) and an array of arguments that aren’t very useful for logging which cron tasks are actually being run. On to the second option.\r\n\r\n#### Filter unschedule_event\r\n\r\nI saw this block of code in `wp-cron.php` and was filled with hope:\r\n\r\n```\r\n// Check lock if ( $doing_cron_transient != $doing_wp_cron ) return;\r\n\r\nforeach ( $crons as $timestamp => $cronhooks ) {\r\n    if ( $timestamp > $gmt_time )\r\n        break;\r\n\r\n    foreach ( $cronhooks as $hook => $keys ) {\r\n\r\n        foreach ( $keys as $k => $v ) {\r\n\r\n            $schedule = $v['schedule'];\r\n\r\n            if ( $schedule != false ) {\r\n                $new_args = array($timestamp, $schedule, $hook, $v['args']);\r\n                call_user_func_array('wp_reschedule_event', $new_args);\r\n            }\r\n\r\n            wp_unschedule_event( $timestamp, $hook, $v['args'] );\r\n\r\n            /**\r\n             * Fires scheduled events.\r\n             *\r\n             * @internal\r\n             * @since 2.1.0\r\n             *\r\n             * @param string $hook Name of the hook that was scheduled to be fired.\r\n             * @param array  $args The arguments to be passed to the hook.\r\n             */\r\n            do_action_ref_array( $hook, $v['args'] );\r\n\r\n            // If the hook ran too long and another cron process stole the lock, quit.\r\n            if ( _get_cron_lock() != $doing_wp_cron )\r\n                return;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNotice the `wp_unschedule_event` call. I know that for both single and recurring cron tasks, this function is called. I also know there’s a `schedule_event` filter, so there *must* be an `unschedule_event` filter too, right? Don’t be stupid. *Of course there isn’t*, that would be too (consistent|easy|sensible|un-WP). If you’re looking for consistency, WordPress (and PHP, actually) is *not* the place to find it.\r\n\r\nSo, to reiterate, there’s no `unschedule_event` filter. *WTF?!* I’m suddenly reminded of this illustration of [good code vs. bad code](http://commadot.com/wtf-per-minute/). Let’s move on.\r\n\r\n#### An idea interjects!\r\n\r\nAfter getting pissed off with WP for not using `apply_filters('unschedule_event')` (and probably getting distracted), I temporarily entertained the idea of just filtering `get_option` for requests for the `cron` option (yea, [you can do that](https://codex.wordpress.org/Plugin_API/Filter_Reference/option_(option_name))). Theoretically, it would only be called while performing actions related to the cron (one can dream), but it introduced the issue of knowing the context from which `get_option('cron')` had been called (i.e. during a cron run, an installation, loading of an admin page, etc.).\r\n\r\nI decided to use `debug_backtrace` to *trace back* through the call stack to figure it out. It yielded the results I wanted, more or less, but it felt too dirty and inefficient to filter `get_option`. Still, it was a useful exercise, as the backtrace code would come in handy later.\r\n\r\n#### Filtering schedule_event\r\n\r\nThe `$timestamp` (next scheduled run time), `$hook` (cron job name) and an array of arguments all get passed to the filter callback — just what I need for logging. This is definitely the most promising of all the approaches so far.\r\n\r\nHowever, there’s still the issue of *context*. `apply_filters('schedule_event')` is called in `wp_schedule_single_event` and `wp_schedule_event`, but those functions aren’t only called when the WP Cron runs, they may also be called when a new task is being added, via a plugin like Crontrol, or while a plugin is being installed, or for any number of reasons from any plugin or theme.\r\n\r\nThe solution was to take the code I’d sketched out while testing the filter for `get_option('cron')` and use it in my `schedule_event` filter callback to determine the likelihood that the cron is actually running. It looks something like this:\r\n\r\n```\r\nclass My_Cron_Log_Class {\r\n\r\n    /* ...other functions here... */\r\n\r\n    public function my_cron_schedule_filter_function($event) {\r\n\r\n        // I want to know what the entry point is, so, before I look through, reverse the $debug_backtrace array\r\n        $backtrace = array_reverse(debug_backtrace(false), true);\r\n\r\n        // Certain files/functions should be present in the trace if this cron run is legit: wp-cron.php (file), wp-crontrol.php (file), wp_reschedule_event (func) wp_schedule_single_event (func)... \r\n        $found_cron_call = false;\r\n        $rescheduled = false;\r\n        $single = false;\r\n        $call_to = false;\r\n        $call_origin = false;\r\n\r\n        // Find out what triggered the call...\r\n        foreach ($backtrace as $i => $trace) {\r\n\r\n            if (preg_match('/(wp-cron(trol)?.php)$/', $trace['file'], $preg_matches)) {\r\n                $found_cron_call = $i;\r\n                $call_to = $preg_matches[0];\r\n            }\r\n\r\n            switch ($trace['function']) {\r\n\r\n                case 'wp_reschedule_event':\r\n                    $rescheduled = true;\r\n                    break;\r\n\r\n                case 'wp_schedule_single_event':\r\n                    $single = true;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if ($found_cron_call !== false && ($rescheduled || $single)) {\r\n\r\n            $call_origin = 'auto_run';\r\n\r\n            if ($call_to == 'wp-crontrol.php') {\r\n                $call_origin = get_current_user_id();\r\n            }\r\n\r\n            // Table has a timestamp field which defaults to current date/time. Fill in the rest...\r\n            $task = array(\r\n                'call_to' => $call_to,\r\n                'call_origin' => $call_origin,\r\n                'task_name' => $event->hook,\r\n                'next_run' => date('Y-m-d h:i:s', $event->timestamp)\r\n            );\r\n            $this->log_task($task);\r\n        }\r\n\r\n        return $event;\r\n    }\r\n\r\n\r\n    private function log_task($task) {\r\n        global $wpdb;\r\n\r\n        $wpdb->insert('my_log_table', $task);\r\n        // Yay! Cron logged!\r\n    }\r\n\r\n    /* ... more functions here... */\r\n\r\n}\r\n```\r\n\r\nI’m going to turn this into a plugin. It feels like something that should be available. The above won’t work if `DISABLE_WP_CRON` is set to `true`, but if this is the case, you don’t need such a plugin. Good on you.\r\n\r\n\r\n",
  "featured-image": {
    "src": ""
  },
  "summary": "",
  "blog": "1",
  "created": "2015-11-23T17:23:45.000Z",
  "updated": "2017-07-25T00:43:49.457Z",
  "published": "2015-11-23T17:23:45.000Z",
  "contentType": "page",
  "id": "BJPDTv1V0e"
}