{
  "title": "CMS Stress",
  "subtitle": "The journey to Gin (part 1)",
  "slug": "cms-stress",
  "section": "gincms",
  "url": "/gincms/cms-stress/",
  "body": "> Wait...what? Where's the directory I was just..? Oh, *shit*. I didn't. I couldn't have.... *Fuck*. I did. OK. Think. Backups? I keep everything under version control but...not the content. Did I make a copy of the content directory as recommended? *No*. Why would I? I've performed hundreds—if not *thousands*—of similar operations and not lost anything. Until *now*. \r\n\r\n> OK, what else? *Think*. Cron job: automated backups of the DB. *Crap*. I didn't get around to setting that up. I was more concerned with the code. OK. How do you recover files deleted with `rm`? Maybe if that sector of the disk hasn't been overwritten, I can recover the directory I deleted...\r\n\r\n---\r\n\r\n### Oh my word!\r\n\r\nIn December of 2015 I had an idea for a tool that would allow me to catalogue my favourite words. I knocked together a Chrome extension in an afternoon and was pleased with the return on investment. It was basic, but effective. About a month later, the extension supported multiple users and had an accompanying mobile app and a [website](https://ohmyword.xyz).\r\n\r\nThe main site was actually a purpose-built Node application, and the [blog](https://ohmyword.xyz/inspiration/) *was* powered by [Ghost](https://tryghost.com).\r\n\r\n### Ghost\r\n\r\nI'd been aware of Ghost since the Kickstarter campaign. I started using it as soon as it became available. Even with its limited feature set, I was immediately a fan. It felt refreshing, after spending so much time with Wordpress. Besides the excellent decision to provide a Markdown editor, it felt lighter, faster and less cluttered than the dreaded *'press*.\r\n\r\n> Damn it. This is why I prefer the content to live outside of the application. Restoration would be easy... Fuck sake. How did I *not* get around to scheduling backups? Wait, I swear the pages get pre-rendered somewhere...\r\n\r\n### Wordpress\r\n\r\nWhen I first discovered Wordpress, I'll admit, I was somewhat enamoured. At the time, I was coming from *Joomla*, and even though I was already a PHP developer by that point, I just couldn't get into it. Wordpress, however, was *easy* to get into. It had a user-friendly interface, a vast number of plugins and themes available, plenty of documentation and was incredibly easy to extend it, if you had even a modicum of know-how. Even though it was originally just a blogging platform (wait, that's not the *Wordpress* tagline...), you could—and still can—build practically any kind of website with it. Of course, because they could, people did: blogs, portfolios, e-commerce sites, web applications and APIs. You name it, people built it. With Wordpress. As a result of its popularity I spent years working with WP, both professionally and in my spare time, but never more intensely than while working on the [Rough Guides](https://www.roughguides.com) website. This was where I fell out of love with Wordpress.\r\n\r\nBetween dealing with the scores of active plugins (many of which had quite unhealthy code), a *monsterous functions.php* file, and the frequent code-dives into the WP core in order to figure out things like: why we have [slow-loading admin](/admin-post-list-loads-slowly-for-hierarchical-custom-post-type/ \"Admin Post List Loads Slowly For Hierarchical Custom Post Type\") pages, [finding out when a cronjob has run](/wordpress-cron-job-log-the-cronundrum/ \"Wordpress Cron Job Log (The Cronundrum)\") and [taming a racing heartbeat](/wordpress-heartbeat/ \"Wordpress Heartbeat\"), it ended up feeling less like *working* and more like *wrestling* with Wordpress. When I finally ended up moving to another project, I was actually a little relieved;  I didn't think I could be any more frustrated than I was at that point. And then I met *Drupal*.\r\n\r\n> This never would have happened with Wordpress. Database *inside* the application directory... Jeez. No DB backups. No content backups. Can't recover from disk. No cached static files. There *has to be* something else. There's *always* another way... **Shit**. *Wayback Machine*.\r\n\r\n### Drupal (7.x)\r\n\r\nThe project I'd been moved to was a trio of sites that used Drupal for content management, but the public websites were SPAs (single page applications) that loaded content from JSON files exported from Drupal via a NodeJS application. This meant: the CMS was never getting hit directly by traffic, content could potentially be downloaded for offline consumption, and the server required to serve the content could be pretty lightweight, because all the data was static. I liked the concept, but the implementation was questionable, to say the least. For instance, the publishing process took 1–2 hours which, in my opinion, is unacceptable and completely unnecessary, especially considering this architecture was designed for use within a publishing company.\r\n\r\n\r\n\r\n\r\n\r\nI used Drupal very briefly several years ago when I was first discovering content management systems. I quickly abandoned it, though, because it wasn't very user-friendly. I think that has improved, but it still doesn't come close the likes of WP and Ghost in terms of ease of use. Depending on how you want to use it, it's not arguably not very developer-friendly either.\r\n\r\n\r\n",
  "featured-image": {
    "src": ""
  },
  "summary": "",
  "blog": "1",
  "created": "2017-05-07T19:36:39.172Z",
  "updated": "2017-07-24T08:23:42.218Z",
  "published": "",
  "contentType": "page",
  "id": "HJ18wlaJW"
}